"use client"

import type React from "react"

import { useState, useCallback } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Upload, ImageIcon, ArrowLeft, Download, AlertCircle, CheckCircle } from "lucide-react"
import Link from "next/link"
import Image from "next/image"

interface AnalysisResult {
  condition: string
  confidence: number
  description: string
  recommendations: string[]
  severity: "low" | "medium" | "high"
}

const mockAnalysisResults: Record<string, AnalysisResult> = {
  normal: {
    condition: "Normal X-Ray",
    confidence: 95,
    description: "No abnormalities detected. The X-ray shows normal bone structure and tissue density.",
    recommendations: [
      "Continue regular health checkups",
      "Maintain good posture and exercise",
      "Follow up as recommended by your physician",
    ],
    severity: "low",
  },
  fracture: {
    condition: "Possible Fracture",
    confidence: 88,
    description: "Potential bone fracture detected. There appears to be a discontinuity in the bone structure.",
    recommendations: [
      "Seek immediate medical attention",
      "Avoid putting weight on the affected area",
      "Apply ice to reduce swelling",
      "Get proper immobilization",
    ],
    severity: "high",
  },
  pneumonia: {
    condition: "Pneumonia Indicators",
    confidence: 82,
    description: "Signs consistent with pneumonia detected. White spots or patches visible in lung areas.",
    recommendations: [
      "Consult a pulmonologist immediately",
      "Start prescribed antibiotic treatment",
      "Get plenty of rest and fluids",
      "Monitor breathing and temperature",
    ],
    severity: "high",
  },
}

export default function XRayAnalysis() {
  const [selectedImage, setSelectedImage] = useState<File | null>(null)
  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisProgress, setAnalysisProgress] = useState(0)
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null)

  const handleImageUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      setSelectedImage(file)
      const reader = new FileReader()
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string)
      }
      reader.readAsDataURL(file)
      setAnalysisResult(null)
    }
  }, [])

  const handleDragOver = useCallback((event: React.DragEvent) => {
    event.preventDefault()
  }, [])

  const handleDrop = useCallback((event: React.DragEvent) => {
    event.preventDefault()
    const file = event.dataTransfer.files[0]
    if (file && file.type.startsWith("image/")) {
      setSelectedImage(file)
      const reader = new FileReader()
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string)
      }
      reader.readAsDataURL(file)
      setAnalysisResult(null)
    }
  }, [])

  const analyzeImage = async () => {
    if (!selectedImage) return

    setIsAnalyzing(true)
    setAnalysisProgress(0)

    // Simulate AI analysis with progress
    const progressInterval = setInterval(() => {
      setAnalysisProgress((prev) => {
        if (prev >= 100) {
          clearInterval(progressInterval)
          return 100
        }
        return prev + 5
      })
    }, 100)

    // Simulate analysis delay
    await new Promise((resolve) => setTimeout(resolve, 2000))

    // Mock analysis result based on filename or random selection
    const resultKeys = Object.keys(mockAnalysisResults)
    const randomResult = resultKeys[Math.floor(Math.random() * resultKeys.length)]
    setAnalysisResult(mockAnalysisResults[randomResult])
    setIsAnalyzing(false)
  }

  const downloadReport = () => {
    if (!analysisResult) return

    const report = `
X-RAY ANALYSIS REPORT
Generated on: ${new Date().toLocaleDateString()}

IMAGE ANALYSIS RESULTS:
Condition: ${analysisResult.condition}
Confidence Level: ${analysisResult.confidence}%
Severity: ${analysisResult.severity.toUpperCase()}

DESCRIPTION:
${analysisResult.description}

RECOMMENDATIONS:
${analysisResult.recommendations.map((r) => `â€¢ ${r}`).join("\n")}

IMPORTANT DISCLAIMER:
This analysis is generated by AI for preliminary assessment only. 
It should not replace professional medical diagnosis or treatment.
Please consult with a qualified radiologist or physician for 
definitive diagnosis and treatment recommendations.

Analysis performed by MEDITRON AI System
    `

    const blob = new Blob([report], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `xray-analysis-${Date.now()}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "low":
        return "bg-green-100 text-green-800"
      case "medium":
        return "bg-yellow-100 text-yellow-800"
      case "high":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "low":
        return <CheckCircle className="h-4 w-4" />
      case "medium":
        return <AlertCircle className="h-4 w-4" />
      case "high":
        return <AlertCircle className="h-4 w-4" />
      default:
        return <AlertCircle className="h-4 w-4" />
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <Link href="/">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Home
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">X-Ray Analysis</h1>
              <p className="text-gray-600">Advanced AI-powered medical imaging analysis</p>
            </div>
          </div>
          <ImageIcon className="h-12 w-12 text-green-600" />
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Upload Section */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Upload X-Ray Image</CardTitle>
                <CardDescription>
                  Upload your X-ray image for AI-powered analysis. Supported formats: JPG, PNG, DICOM
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div
                  className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-green-400 transition-colors cursor-pointer"
                  onDragOver={handleDragOver}
                  onDrop={handleDrop}
                  onClick={() => document.getElementById("file-upload")?.click()}
                >
                  <Upload className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-lg font-medium text-gray-900 mb-2">Drop your X-ray image here</p>
                  <p className="text-sm text-gray-600 mb-4">or click to browse files</p>
                  <Button variant="outline">Choose File</Button>
                  <input
                    id="file-upload"
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                  />
                </div>
              </CardContent>
            </Card>

            {/* Image Preview */}
            {imagePreview && (
              <Card>
                <CardHeader>
                  <CardTitle>Image Preview</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="relative aspect-square bg-gray-100 rounded-lg overflow-hidden">
                    <Image
                      src={imagePreview || "/placeholder.svg"}
                      alt="X-ray preview"
                      fill
                      className="object-contain"
                    />
                  </div>
                  <div className="mt-4 flex space-x-2">
                    <Button onClick={analyzeImage} disabled={isAnalyzing} className="flex-1">
                      {isAnalyzing ? "Analyzing..." : "Analyze Image"}
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => {
                        setSelectedImage(null)
                        setImagePreview(null)
                        setAnalysisResult(null)
                      }}
                    >
                      Clear
                    </Button>
                  </div>

                  {isAnalyzing && (
                    <div className="mt-4">
                      <div className="flex justify-between text-sm text-gray-600 mb-2">
                        <span>AI Analysis in Progress</span>
                        <span>{analysisProgress}%</span>
                      </div>
                      <Progress value={analysisProgress} className="w-full" />
                      <p className="text-xs text-gray-500 mt-2">Processing image with advanced AI algorithms...</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
          </div>

          {/* Results Section */}
          <div className="space-y-6">
            {analysisResult && (
              <>
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <span>Analysis Results</span>
                      <Badge className={getSeverityColor(analysisResult.severity)}>
                        {getSeverityIcon(analysisResult.severity)}
                        <span className="ml-1">{analysisResult.severity.toUpperCase()}</span>
                      </Badge>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <h3 className="text-xl font-semibold text-gray-900">{analysisResult.condition}</h3>
                      <p className="text-gray-600 mt-2">{analysisResult.description}</p>
                    </div>

                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <span className="font-medium">Confidence Level</span>
                        <span className="text-sm text-gray-600">{analysisResult.confidence}%</span>
                      </div>
                      <Progress value={analysisResult.confidence} className="w-full" />
                    </div>

                    <Alert className={analysisResult.severity === "high" ? "border-red-200 bg-red-50" : ""}>
                      <AlertCircle className="h-4 w-4" />
                      <AlertDescription>
                        {analysisResult.severity === "high"
                          ? "This analysis indicates potential medical concerns that require immediate attention."
                          : "This is an AI-generated analysis for preliminary assessment only."}
                      </AlertDescription>
                    </Alert>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Recommendations</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {analysisResult.recommendations.map((recommendation, index) => (
                        <li key={index} className="flex items-start space-x-2">
                          <span className="text-green-600 mt-1">â€¢</span>
                          <span className="text-sm">{recommendation}</span>
                        </li>
                      ))}
                    </ul>

                    <div className="mt-6 pt-4 border-t">
                      <Button onClick={downloadReport} className="w-full" variant="outline">
                        <Download className="h-4 w-4 mr-2" />
                        Download Detailed Report
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                <Alert>
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>Medical Disclaimer:</strong> This AI analysis is for informational purposes only and should
                    not replace professional medical diagnosis. Always consult with a qualified radiologist or physician
                    for definitive diagnosis and treatment.
                  </AlertDescription>
                </Alert>
              </>
            )}

            {!analysisResult && !isAnalyzing && (
              <Card>
                <CardContent className="text-center py-12">
                  <ImageIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Analysis Yet</h3>
                  <p className="text-gray-600">Upload an X-ray image to get started with AI-powered analysis</p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
