"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { FileText, ArrowLeft, Download, User, Calendar, Activity } from "lucide-react"
import Link from "next/link"

interface PatientInfo {
  name: string
  age: string
  gender: string
  contactNumber: string
  email: string
  address: string
}

interface MedicalHistory {
  conditions: string[]
  medications: string[]
  allergies: string[]
  surgeries: string[]
}

const commonConditions = [
  "Diabetes",
  "Hypertension",
  "Asthma",
  "Heart Disease",
  "Arthritis",
  "Depression",
  "Anxiety",
  "Migraine",
  "Obesity",
  "High Cholesterol",
]

const commonMedications = [
  "Aspirin",
  "Metformin",
  "Lisinopril",
  "Atorvastatin",
  "Omeprazole",
  "Levothyroxine",
  "Amlodipine",
  "Metoprolol",
  "Losartan",
  "Simvastatin",
]

const commonAllergies = [
  "Penicillin",
  "Sulfa drugs",
  "Aspirin",
  "Ibuprofen",
  "Latex",
  "Peanuts",
  "Shellfish",
  "Eggs",
  "Milk",
  "Soy",
]

export default function HealthReports() {
  const [patientInfo, setPatientInfo] = useState<PatientInfo>({
    name: "",
    age: "",
    gender: "",
    contactNumber: "",
    email: "",
    address: "",
  })

  const [medicalHistory, setMedicalHistory] = useState<MedicalHistory>({
    conditions: [],
    medications: [],
    allergies: [],
    surgeries: [],
  })

  const [currentSymptoms, setCurrentSymptoms] = useState("")
  const [additionalNotes, setAdditionalNotes] = useState("")
  const [reportType, setReportType] = useState("")

  const handlePatientInfoChange = (field: keyof PatientInfo, value: string) => {
    setPatientInfo((prev) => ({ ...prev, [field]: value }))
  }

  const handleMedicalHistoryChange = (category: keyof MedicalHistory, item: string, checked: boolean) => {
    setMedicalHistory((prev) => ({
      ...prev,
      [category]: checked ? [...prev[category], item] : prev[category].filter((i) => i !== item),
    }))
  }

  const generateReport = () => {
    const report = `
COMPREHENSIVE HEALTH REPORT
Generated on: ${new Date().toLocaleDateString()}
Report Type: ${reportType || "General Health Assessment"}

PATIENT INFORMATION:
Name: ${patientInfo.name}
Age: ${patientInfo.age}
Gender: ${patientInfo.gender}
Contact: ${patientInfo.contactNumber}
Email: ${patientInfo.email}
Address: ${patientInfo.address}

MEDICAL HISTORY:
Current Medical Conditions:
${medicalHistory.conditions.length > 0 ? medicalHistory.conditions.map((c) => `• ${c}`).join("\n") : "• None reported"}

Current Medications:
${medicalHistory.medications.length > 0 ? medicalHistory.medications.map((m) => `• ${m}`).join("\n") : "• None reported"}

Known Allergies:
${medicalHistory.allergies.length > 0 ? medicalHistory.allergies.map((a) => `• ${a}`).join("\n") : "• None reported"}

Previous Surgeries:
${medicalHistory.surgeries.length > 0 ? medicalHistory.surgeries.join(", ") : "None reported"}

CURRENT SYMPTOMS:
${currentSymptoms || "No current symptoms reported"}

ADDITIONAL NOTES:
${additionalNotes || "No additional notes"}

RECOMMENDATIONS:
• Regular health checkups as recommended by your physician
• Maintain a balanced diet and regular exercise routine
• Monitor any changes in symptoms and report to healthcare provider
• Keep this report updated with any new medical information
• Follow prescribed medication schedules

IMPORTANT DISCLAIMER:
This report is compiled based on patient-provided information and is intended 
for informational purposes only. It should not replace professional medical 
consultation, diagnosis, or treatment. Always consult with qualified healthcare 
professionals for medical advice and treatment decisions.

Report generated by MEDITRON Health Management System
    `

    const blob = new Blob([report], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `health-report-${patientInfo.name.replace(/\s+/g, "-").toLowerCase()}-${Date.now()}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  const isFormValid = () => {
    return patientInfo.name && patientInfo.age && patientInfo.gender && reportType
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-white">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <Link href="/">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Home
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Health Reports</h1>
              <p className="text-gray-600">Generate comprehensive medical reports</p>
            </div>
          </div>
          <FileText className="h-12 w-12 text-orange-600" />
        </div>

        <div className="space-y-8">
          {/* Patient Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <User className="h-5 w-5" />
                <span>Patient Information</span>
              </CardTitle>
              <CardDescription>Enter basic patient details for the medical report</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name">Full Name *</Label>
                  <Input
                    id="name"
                    value={patientInfo.name}
                    onChange={(e) => handlePatientInfoChange("name", e.target.value)}
                    placeholder="Enter full name"
                  />
                </div>
                <div>
                  <Label htmlFor="age">Age *</Label>
                  <Input
                    id="age"
                    type="number"
                    value={patientInfo.age}
                    onChange={(e) => handlePatientInfoChange("age", e.target.value)}
                    placeholder="Enter age"
                  />
                </div>
                <div>
                  <Label htmlFor="gender">Gender *</Label>
                  <Select onValueChange={(value) => handlePatientInfoChange("gender", value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select gender" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="male">Male</SelectItem>
                      <SelectItem value="female">Female</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="contact">Contact Number</Label>
                  <Input
                    id="contact"
                    value={patientInfo.contactNumber}
                    onChange={(e) => handlePatientInfoChange("contactNumber", e.target.value)}
                    placeholder="Enter contact number"
                  />
                </div>
                <div>
                  <Label htmlFor="email">Email Address</Label>
                  <Input
                    id="email"
                    type="email"
                    value={patientInfo.email}
                    onChange={(e) => handlePatientInfoChange("email", e.target.value)}
                    placeholder="Enter email address"
                  />
                </div>
                <div>
                  <Label htmlFor="reportType">Report Type *</Label>
                  <Select onValueChange={setReportType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select report type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="general">General Health Assessment</SelectItem>
                      <SelectItem value="annual">Annual Physical Exam</SelectItem>
                      <SelectItem value="specialist">Specialist Consultation</SelectItem>
                      <SelectItem value="followup">Follow-up Report</SelectItem>
                      <SelectItem value="emergency">Emergency Visit</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div>
                <Label htmlFor="address">Address</Label>
                <Textarea
                  id="address"
                  value={patientInfo.address}
                  onChange={(e) => handlePatientInfoChange("address", e.target.value)}
                  placeholder="Enter complete address"
                  rows={2}
                />
              </div>
            </CardContent>
          </Card>

          {/* Medical History */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Activity className="h-5 w-5" />
                <span>Medical History</span>
              </CardTitle>
              <CardDescription>Select relevant medical conditions, medications, and allergies</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Medical Conditions */}
              <div>
                <Label className="text-base font-medium">Current Medical Conditions</Label>
                <div className="grid md:grid-cols-2 gap-2 mt-2">
                  {commonConditions.map((condition) => (
                    <div key={condition} className="flex items-center space-x-2">
                      <Checkbox
                        id={`condition-${condition}`}
                        checked={medicalHistory.conditions.includes(condition)}
                        onCheckedChange={(checked) =>
                          handleMedicalHistoryChange("conditions", condition, checked as boolean)
                        }
                      />
                      <label
                        htmlFor={`condition-${condition}`}
                        className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                      >
                        {condition}
                      </label>
                    </div>
                  ))}
                </div>
                {medicalHistory.conditions.length > 0 && (
                  <div className="mt-2 flex flex-wrap gap-1">
                    {medicalHistory.conditions.map((condition) => (
                      <Badge key={condition} variant="secondary">
                        {condition}
                      </Badge>
                    ))}
                  </div>
                )}
              </div>

              {/* Current Medications */}
              <div>
                <Label className="text-base font-medium">Current Medications</Label>
                <div className="grid md:grid-cols-2 gap-2 mt-2">
                  {commonMedications.map((medication) => (
                    <div key={medication} className="flex items-center space-x-2">
                      <Checkbox
                        id={`medication-${medication}`}
                        checked={medicalHistory.medications.includes(medication)}
                        onCheckedChange={(checked) =>
                          handleMedicalHistoryChange("medications", medication, checked as boolean)
                        }
                      />
                      <label
                        htmlFor={`medication-${medication}`}
                        className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                      >
                        {medication}
                      </label>
                    </div>
                  ))}
                </div>
                {medicalHistory.medications.length > 0 && (
                  <div className="mt-2 flex flex-wrap gap-1">
                    {medicalHistory.medications.map((medication) => (
                      <Badge key={medication} variant="secondary">
                        {medication}
                      </Badge>
                    ))}
                  </div>
                )}
              </div>

              {/* Allergies */}
              <div>
                <Label className="text-base font-medium">Known Allergies</Label>
                <div className="grid md:grid-cols-2 gap-2 mt-2">
                  {commonAllergies.map((allergy) => (
                    <div key={allergy} className="flex items-center space-x-2">
                      <Checkbox
                        id={`allergy-${allergy}`}
                        checked={medicalHistory.allergies.includes(allergy)}
                        onCheckedChange={(checked) =>
                          handleMedicalHistoryChange("allergies", allergy, checked as boolean)
                        }
                      />
                      <label
                        htmlFor={`allergy-${allergy}`}
                        className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                      >
                        {allergy}
                      </label>
                    </div>
                  ))}
                </div>
                {medicalHistory.allergies.length > 0 && (
                  <div className="mt-2 flex flex-wrap gap-1">
                    {medicalHistory.allergies.map((allergy) => (
                      <Badge key={allergy} variant="secondary">
                        {allergy}
                      </Badge>
                    ))}
                  </div>
                )}
              </div>

              {/* Previous Surgeries */}
              <div>
                <Label htmlFor="surgeries" className="text-base font-medium">
                  Previous Surgeries
                </Label>
                <Textarea
                  id="surgeries"
                  value={medicalHistory.surgeries.join(", ")}
                  onChange={(e) =>
                    setMedicalHistory((prev) => ({
                      ...prev,
                      surgeries: e.target.value
                        .split(",")
                        .map((s) => s.trim())
                        .filter((s) => s),
                    }))
                  }
                  placeholder="List any previous surgeries (comma-separated)"
                  rows={2}
                />
              </div>
            </CardContent>
          </Card>

          {/* Current Symptoms & Notes */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Calendar className="h-5 w-5" />
                <span>Current Assessment</span>
              </CardTitle>
              <CardDescription>Describe current symptoms and any additional notes</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="symptoms">Current Symptoms</Label>
                <Textarea
                  id="symptoms"
                  value={currentSymptoms}
                  onChange={(e) => setCurrentSymptoms(e.target.value)}
                  placeholder="Describe any current symptoms, their duration, and severity"
                  rows={3}
                />
              </div>
              <div>
                <Label htmlFor="notes">Additional Notes</Label>
                <Textarea
                  id="notes"
                  value={additionalNotes}
                  onChange={(e) => setAdditionalNotes(e.target.value)}
                  placeholder="Any additional information, concerns, or observations"
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Generate Report */}
          <Card>
            <CardHeader>
              <CardTitle>Generate Report</CardTitle>
              <CardDescription>Review the information and generate a comprehensive health report</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <h4 className="font-medium mb-2">Report Summary:</h4>
                  <div className="text-sm text-gray-600 space-y-1">
                    <p>
                      <strong>Patient:</strong> {patientInfo.name || "Not specified"}
                    </p>
                    <p>
                      <strong>Age:</strong> {patientInfo.age || "Not specified"}
                    </p>
                    <p>
                      <strong>Gender:</strong> {patientInfo.gender || "Not specified"}
                    </p>
                    <p>
                      <strong>Report Type:</strong> {reportType || "Not specified"}
                    </p>
                    <p>
                      <strong>Medical Conditions:</strong> {medicalHistory.conditions.length} selected
                    </p>
                    <p>
                      <strong>Current Medications:</strong> {medicalHistory.medications.length} selected
                    </p>
                    <p>
                      <strong>Known Allergies:</strong> {medicalHistory.allergies.length} selected
                    </p>
                  </div>
                </div>

                <Button onClick={generateReport} disabled={!isFormValid()} className="w-full" size="lg">
                  <Download className="h-4 w-4 mr-2" />
                  Generate & Download Report
                </Button>

                {!isFormValid() && (
                  <p className="text-sm text-red-600 text-center">
                    Please fill in all required fields (marked with *) to generate the report
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
